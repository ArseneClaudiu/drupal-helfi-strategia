<?php
use Drupal\Core\Entity\Display\EntityFormDisplayInterface;
use Drupal\Component\Serialization\Json;
use Drupal\Core\Form\FormStateInterface;
use Drupal\taxonomy\Entity\Term;
use Drupal\Core\Entity\EntityInterface;

/**
 * Implements hook_theme().
 */
function helfi_ahjo_theme($existing, $type, $theme, $path) {
  return [
    'hierarchical_taxonomy_tree' => [
      'builds' => [
        'menu_tree' => [],
        'route_tid' => NULL,
        'vocabulary' => NULL,
        'current_depth' => 0,
        'max_depth' => 0,
        'collapsible' => NULL,
      ],
    ],
    'organigram_container' => [
      'builds' => [
        'menu_tree' => [],
      ],
    ],
  ];

}

/**
 * Implements hook_cron().
 */
function helfi_ahjo_cron() {
  $config = \Drupal::configFactory()->get('helfi_ahjo.config');
  /** @var int $last_run */
  $last_run = \Drupal::state()->get('helfi_ahjo.last_run', 0);
  /** @var int $request_time */
  $request_time = \Drupal::time()->getRequestTime();
  $interval = $config->get('sync_interval') ?? 3600;

  // Check if we need to execute.
  if ($interval !== -1 && $last_run + $interval >= $request_time) {
    return;
  }

  $count = \Drupal::queue('sote_section_update')->numberOfItems();

  if ($count > 0) {
    $logger = \Drupal::service('logger.factory')->get('helfi_ahjo');
    $logger->info('Cron execution has been cancelled because the queue @queue_name is not empty (@count items)..', [
      '@count' => $count,
      '@queue_name' => 'Acquia DAM Asset Refresh',
    ]);
    return;
  }

  $jsonFile = Json::decode(\Drupal::service('helfi_ahjo.ahjo_service')->fetchDataFromRemote());
  $queue = \Drupal::queue('sote_section_update');
  \Drupal::service('helfi_ahjo.ahjo_service')->addToCron($jsonFile, $queue);

  $count = \Drupal::queue('sote_section_update')->numberOfItems();

  /** @var \Drupal\Core\Logger\LoggerChannelInterface $logger */
  $logger = \Drupal::service('logger.factory')->get('helfi_ahjo');
  $logger->info('Total items in the queue: @count.', ['@count' => $count]);
  \Drupal::service('helfi_ahjo.ahjo_service')->syncTaxonomyTermsTree();
  \Drupal::state()->set('helfi_ahjo.last_run', $request_time);
}


function create_tax_terms_batch($data, &$context) {
  $message = 'Creating taxonomy terms...';

  $hierarchy[] = [
    'id' => $data['ID'],
    'parent' => $data['parentId'] ?? 0,
    'title' => $data['Name'],
  ];

  $loadByExternalId = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties([
    'vid' => 'sote_section',
    'field_external_id' => $data['ID'],
  ]);

  if (count($loadByExternalId) == 0) {
    $term = Term::create([
      'name' => $data['Name'],
      'vid' => 'sote_section',
      'field_external_id' => $data['ID'],
      'field_external_parent_id' => $data['parentId'],
      'field_section_type' => $data['Type'],
      'field_type_id' => $data['TypeId'],
    ]);
    $term->save();
  }
  else {
    $term = array_values($loadByExternalId);

    $term[0]->set('field_external_id', $data['ID']);
    $term[0]->set('field_external_parent_id', $data['parentId']);
    $term[0]->set('field_section_type', $data['Type']);
    $term[0]->set('field_type_id', $data['TypeId']);
    $term[0]->save();
  }

  $context['message'] = $message;
}

function create_tax_terms_batch_finished($success, $results, $operations) {
  if ($success) {
    $message = t('Terms processed.');

  }
  else {
    $message = t('Finished with an error.');
  }
  \Drupal::service('helfi_ahjo.ahjo_service')->syncTaxonomyTermsTree();
  \Drupal::messenger()->addStatus($message);

}
